namespace :load do
  task :defaults do
    set :endless_pid, -> { File.join(shared_path, 'tmp', 'pids', 'endless.pid') }
    set :endless_role, :app
    set :endless_env, -> { fetch(:run_mode, 'production') }
    set :endless_binary, -> { fetch(:application) }
    set :endless_start_cmd, -> { "#{shared_path}/#{fetch(:endless_binary)} >> #{shared_path}/log/stdout.log 2>> #{shared_path}/log/stderr.log" }
    set :endless_safe_restart_signal, "HUP"
    set :endless_safe_stop_signal, "TERM"
    set :image_name, 'golang:1.9'
    append :linked_dirs, "log", "tmp"
    after "bundler:install", "deploy:build_bin"
    after "deploy:build_bin", "deploy:copy_bin"
    after "deploy:copy_bin", "deploy:copy_config"
    after "deploy:copy_config", "endless:safe-restart"
  end
end

namespace :deploy do
  task :build_bin do
    on roles(:app) do
      within release_path do
        execute("docker run --rm -e 'GOOS=linux' -e 'GOARCH=amd64' -v #{fetch(:release_path)}:/go/src/#{fetch(:application)} -w '/go/src/#{fetch(:application)}' #{fetch(:image_name)} go build #{fetch(:endless_binary)}.go")
      end
    end
  end

  task :copy_bin do
    on roles(:app) do
      within release_path do
        execute("cp -f #{release_path}/#{fetch(:endless_binary)} #{shared_path}")
      end
    end
  end

  task :copy_config do
    on roles(:app) do
      within release_path do
        execute("mkdir -p #{shared_path}/config")
        execute("cp -r #{release_path}/config/* #{shared_path}/config")
      end
    end
  end
end

namespace :endless do
  desc "start Endless server"
  task :start do
    on roles(fetch(:endless_role)) do
      within shared_path do
        if (test "[ -f #{fetch(:endless_pid)} ]") && (test :kill, "-0 $( cat #{fetch(:endless_pid)} )")
          info 'Already Endless is running'
        else
          execute "export RUN_MODE=#{fetch(:endless_env)} && cd #{shared_path} && rvm #{fetch(:rvm_ruby_version)} do ruby -e 'system(\"nohup #{fetch(:endless_start_cmd)} &\")'"
        end
      end
    end
  end

  desc "kill endless immediately (no graceful) then start new endless"
  task "harmful-restart" do
    on roles(fetch(:endless_role)) do
      within shared_path do
        if (test "[ -f #{fetch(:endless_pid)} ]") && (test :kill, "-0 $( cat #{fetch(:endless_pid)} )")
          execute "cat #{fetch(:endless_pid)} | xargs kill -s KILL"
          invoke("endless:start")
        else
          invoke("endless:start")
        end
      end
    end
  end

  desc "graceful restart endless"
  task "safe-restart" do
    on roles(fetch(:endless_role)) do
      within shared_path do
        if (test "[ -f #{fetch(:endless_pid)} ]") && (test :kill, "-0 $( cat #{fetch(:endless_pid)} )")
          execute "export RUN_MODE=#{fetch(:endless_env)} && cat #{fetch(:endless_pid)} | xargs kill -s #{fetch(:endless_safe_restart_signal)}"
        else
          invoke("endless:start")
        end
      end
    end
  end

  desc "graceful shutdown endless"
  task "safe-stop" do
    on roles(fetch(:endless_role)) do
      within shared_path do
        if (test "[ -f #{fetch(:endless_pid)} ]") && (test :kill, "-0 $( cat #{fetch(:endless_pid)} )")
          execute "cat #{fetch(:endless_pid)} | xargs kill -s #{fetch(:endless_safe_stop_signal)}"
        else
          info "Already Endless is stopped"
        end
      end
    end
  end
end
